/**
 * Observador concreto que implementa actualizaciones del dashboard
 * Implementa el patr√≥n Observer - reacciona a las alertas actualizando la interfaz de usuario
 */
public class NotificadorDashboard implements ObservadorAlerta {
    
    @Override
    public void actualizar(Alerta alerta) {
        System.out.println("üìä ACTUALIZANDO DASHBOARD - " + alerta.getMensaje());
        
        // Aqu√≠ se implementar√≠a la l√≥gica real de actualizaci√≥n del dashboard
        // Por ejemplo: actualizar gr√°ficos, tablas, indicadores en tiempo real
        actualizarDashboardReal(alerta);
    }
    
    @Override
    public String obtenerTipoObservador() {
        return "NotificadorDashboard";
    }
    
    /**
     * M√©todo privado que simula la actualizaci√≥n real del dashboard
     * @param alerta La alerta a mostrar en el dashboard
     */
    private void actualizarDashboardReal(Alerta alerta) {
        // Simulaci√≥n de actualizaci√≥n del dashboard
        System.out.println("   ‚Üí Actualizando gr√°fico de alertas en tiempo real");
        System.out.println("   ‚Üí Refrescando tabla de sensores");
        System.out.println("   ‚Üí Actualizando indicadores de estado");
        
        // En una implementaci√≥n real, aqu√≠ se usar√≠a WebSocket, Server-Sent Events,
        // o alg√∫n framework como Spring WebFlux para actualizaciones en tiempo real
    }
}
