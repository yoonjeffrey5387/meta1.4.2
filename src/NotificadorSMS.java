/**
 * Observador concreto que implementa notificaciones por SMS
 * Implementa el patr√≥n Observer - reacciona a las alertas enviando SMS solo para alertas cr√≠ticas
 */
public class NotificadorSMS implements ObservadorAlerta {
    
    @Override
    public void actualizar(Alerta alerta) {
        // Solo enviar SMS para alertas cr√≠ticas
        if (alerta.getNivel() == NivelAlerta.CRITICO) {
            System.out.println("üì± ENVIANDO SMS CR√çTICO - " + alerta.getMensaje());
            
            // Aqu√≠ se implementar√≠a la l√≥gica real de env√≠o de SMS
            enviarSMSReal(alerta);
        } else {
            System.out.println("üì± SMS no enviado - Nivel no cr√≠tico: " + alerta.getNivel());
        }
    }
    
    @Override
    public String obtenerTipoObservador() {
        return "NotificadorSMS";
    }
    
    /**
     * M√©todo privado que simula el env√≠o real de SMS
     * @param alerta La alerta cr√≠tica a enviar por SMS
     */
    private void enviarSMSReal(Alerta alerta) {
        // Simulaci√≥n de l√≥gica de env√≠o de SMS
        String numeroDestino = "+1234567890"; // N√∫mero del supervisor
        String mensaje = "ALERTA CR√çTICA: " + alerta.getMensaje() + 
                        " - Sensor: " + alerta.getIdSensor();
        
        System.out.println("   ‚Üí N√∫mero destino: " + numeroDestino);
        System.out.println("   ‚Üí Mensaje: " + mensaje);
        
        // En una implementaci√≥n real, aqu√≠ se usar√≠a un servicio como Twilio, AWS SNS, etc.
    }
}
