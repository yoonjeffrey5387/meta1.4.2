/**
 * Clase principal del Sistema de Monitoreo IoT
 * Integra los patrones Singleton, Observer y Strategy para crear un sistema
 * cohesivo de monitoreo de sensores en una f√°brica inteligente
 */
public class SistemaMonitoreoIoT {
    
    public static void main(String[] args) {
        System.out.println("=== üè≠ SISTEMA DE MONITOREO IoT - F√ÅBRICA INTELIGENTE ===\n");
        
        // Configurar el sistema completo
        configurarSistema();
        
        // Simular operaciones del sistema
        simularOperaciones();
        
        System.out.println("\n=== üèÅ SISTEMA FINALIZADO ===");
    }
    
    /**
     * Configura el sistema completo con sensores, observadores y estrategias
     */
    private static void configurarSistema() {
        System.out.println("üîß Configurando sistema IoT...\n");
        
        // 1. Obtener instancia del GestorSensores (Singleton)
        GestorSensores gestor = GestorSensores.obtenerInstancia();
        NotificadorAlertas notificador = NotificadorAlertas.obtenerInstancia();
        
        // 2. Registrar sensores de diferentes tipos
        System.out.println("üì° Registrando sensores...");
        Sensor sensorTemperatura = new Sensor("TEMP-001", "temperatura", 25.0, "Sala de M√°quinas A");
        Sensor sensorVibracion = new Sensor("VIB-001", "vibracion", 2.0, "Motor Principal");
        Sensor sensorEnergia = new Sensor("ENER-001", "energia", 800.0, "Subestaci√≥n El√©ctrica");
        Sensor sensorCalidadAire = new Sensor("AIR-001", "calidad_aire", 50.0, "√Årea de Producci√≥n");
        Sensor sensorHumedad = new Sensor("HUM-001", "humedad", 45.0, "Almac√©n de Materiales");
        
        gestor.registrarSensor(sensorTemperatura);
        gestor.registrarSensor(sensorVibracion);
        gestor.registrarSensor(sensorEnergia);
        gestor.registrarSensor(sensorCalidadAire);
        gestor.registrarSensor(sensorHumedad);
        
        // 3. Configurar observadores
        System.out.println("\nüëÄ Configurando observadores...");
        notificador.registrarObservador(new NotificadorEmail());
        notificador.registrarObservador(new NotificadorDashboard());
        notificador.registrarObservador(new NotificadorSMS());
        notificador.registrarObservador(new RegistradorLogs());
        
        // 4. Configurar estrategia inicial
        notificador.establecerEstrategiaAnalisis(new EstrategiaAnalisisTemperatura());
        
        System.out.println("\n‚úÖ Sistema configurado correctamente");
        System.out.println("   - Sensores registrados: " + gestor.obtenerCantidadSensores());
        System.out.println("   - Observadores activos: " + notificador.obtenerCantidadObservadores());
    }
    
    /**
     * Simula operaciones del sistema con diferentes escenarios
     */
    private static void simularOperaciones() {
        System.out.println("\nüî¨ Simulando operaciones del sistema...\n");
        
        GestorSensores gestor = GestorSensores.obtenerInstancia();
        NotificadorAlertas notificador = NotificadorAlertas.obtenerInstancia();
        
        try {
            // Escenario 1: Lecturas normales
            System.out.println("--- üìä Lecturas Normales ---");
            gestor.actualizarValorSensor("TEMP-001", 45.0);
            Thread.sleep(1000);
            
            // Escenario 2: Temperatura cr√≠tica
            System.out.println("\n--- üå°Ô∏è Temperatura Cr√≠tica ---");
            gestor.actualizarValorSensor("TEMP-001", 85.0);
            Thread.sleep(1000);
            
            // Escenario 3: Cambio de estrategia y vibraci√≥n peligrosa
            System.out.println("\n--- üîÑ Cambio de Estrategia - Vibraci√≥n ---");
            notificador.establecerEstrategiaAnalisis(new EstrategiaAnalisisVibracion());
            gestor.actualizarValorSensor("VIB-001", 6.5);
            Thread.sleep(1000);
            
            // Escenario 4: Alto consumo energ√©tico
            System.out.println("\n--- ‚ö° Alto Consumo Energ√©tico ---");
            notificador.establecerEstrategiaAnalisis(new EstrategiaAnalisisEnergia());
            gestor.actualizarValorSensor("ENER-001", 1200.0);
            Thread.sleep(1000);
            
            // Escenario 5: Calidad del aire cr√≠tica
            System.out.println("\n--- üå´Ô∏è Calidad del Aire Cr√≠tica ---");
            notificador.establecerEstrategiaAnalisis(new EstrategiaAnalisisCalidadAire());
            gestor.actualizarValorSensor("AIR-001", 250.0);
            Thread.sleep(1000);
            
            // Escenario 6: Humedad cr√≠tica
            System.out.println("\n--- üíß Humedad Cr√≠tica ---");
            notificador.establecerEstrategiaAnalisis(new EstrategiaAnalisisHumedad());
            gestor.actualizarValorSensor("HUM-001", 95.0);
            Thread.sleep(1000);
            
            // Mostrar estad√≠sticas finales
            mostrarEstadisticasFinales(gestor, notificador);
            
        } catch (InterruptedException e) {
            System.err.println("‚ùå Error en la simulaci√≥n: " + e.getMessage());
        }
    }
    
    /**
     * Muestra las estad√≠sticas finales del sistema
     */
    private static void mostrarEstadisticasFinales(GestorSensores gestor, NotificadorAlertas notificador) {
        System.out.println("\n=== üìä ESTAD√çSTICAS FINALES ===");
        System.out.println("Sensores registrados: " + gestor.obtenerCantidadSensores());
        System.out.println("Observadores activos: " + notificador.obtenerCantidadObservadores());
        System.out.println("Estrategia actual: " + notificador.obtenerEstrategiaActual().getClass().getSimpleName());
        
        // Mostrar estad√≠sticas detalladas
        System.out.println("\nüìà Estad√≠sticas detalladas:");
        var estadisticas = gestor.obtenerEstadisticas();
        System.out.println("   - Total sensores: " + estadisticas.get("totalSensores"));
        System.out.println("   - Sensores por tipo: " + estadisticas.get("sensoresPorTipo"));
        System.out.println("   - Valores promedio: " + estadisticas.get("valoresPromedio"));
        
        // Mostrar logs si hay un RegistradorLogs
        for (ObservadorAlerta observador : notificador.obtenerObservadores()) {
            if (observador instanceof RegistradorLogs) {
                RegistradorLogs registrador = (RegistradorLogs) observador;
                System.out.println("\nüìù Logs registrados (" + registrador.obtenerCantidadLogs() + "):");
                for (String log : registrador.obtenerLogs()) {
                    System.out.println("   " + log);
                }
                break;
            }
        }
    }
}
