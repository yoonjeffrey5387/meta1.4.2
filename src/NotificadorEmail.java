/**
 * Observador concreto que implementa notificaciones por email
 * Implementa el patr√≥n Observer - reacciona a las alertas enviando emails
 */
public class NotificadorEmail implements ObservadorAlerta {
    
    @Override
    public void actualizar(Alerta alerta) {
        String prefijo = "";
        switch (alerta.getNivel()) {
            case CRITICO: 
                prefijo = "üö® CR√çTICO - "; 
                break;
            case ADVERTENCIA: 
                prefijo = "‚ö†Ô∏è ADVERTENCIA - "; 
                break;
            case INFORMATIVO: 
                prefijo = "‚ÑπÔ∏è INFORMATIVO - "; 
                break;
        }
        
        System.out.println("üìß ENVIANDO EMAIL - " + prefijo + alerta.getMensaje());
        
        // Aqu√≠ se implementar√≠a la l√≥gica real de env√≠o de email
        // Por ejemplo: conectar con un servicio SMTP, configurar destinatarios, etc.
        enviarEmailReal(alerta, prefijo);
    }
    
    @Override
    public String obtenerTipoObservador() {
        return "NotificadorEmail";
    }
    
    /**
     * M√©todo privado que simula el env√≠o real de email
     * @param alerta La alerta a enviar
     * @param prefijo El prefijo seg√∫n el nivel de criticidad
     */
    private void enviarEmailReal(Alerta alerta, String prefijo) {
        // Simulaci√≥n de l√≥gica de env√≠o de email
        String destinatario = "admin@fabrica.com";
        String asunto = "Alerta IoT - " + alerta.getNivel();
        String cuerpo = prefijo + alerta.getMensaje() + 
                       "\nSensor: " + alerta.getIdSensor() +
                       "\nFecha: " + alerta.getFechaHora();
        
        // En una implementaci√≥n real, aqu√≠ se usar√≠a JavaMail API o similar
        System.out.println("   ‚Üí Destinatario: " + destinatario);
        System.out.println("   ‚Üí Asunto: " + asunto);
        System.out.println("   ‚Üí Cuerpo: " + cuerpo);
    }
}
