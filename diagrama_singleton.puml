@startuml Patr√≥n Singleton - Sistema IoT

!theme plain
skinparam backgroundColor #F8F9FA
skinparam classBackgroundColor #FFFFFF
skinparam classBorderColor #2C3E50
skinparam classFontColor #2C3E50
skinparam packageBackgroundColor #E8F4FD
skinparam packageBorderColor #3498DB
skinparam noteBackgroundColor #FFF3CD
skinparam noteBorderColor #FFC107
skinparam arrowColor #2C3E50
skinparam arrowThickness 2
skinparam interfaceBackgroundColor #E8F5E8
skinparam interfaceBorderColor #28A745

title <size:20><b>üîí Patr√≥n Singleton</b></size>\n<size:14>Gesti√≥n Centralizada de Recursos IoT</size>\n<size:12>Meta 1.4.2 - Yoon Jeffrey</size>

' ==========================================
' SINGLETON PRINCIPAL - GESTOR SENSORES
' ==========================================

package "Singleton Pattern - GestorSensores" #F0F8FF {
    class GestorSensores {
        - static volatile GestorSensores instancia
        - Map<String, Sensor> sensores
        - Object lock = new Object()
        --
        - GestorSensores()
        + obtenerInstancia() : GestorSensores
        + registrarSensor(Sensor) : void
        + actualizarValorSensor(String, double) : void
        + obtenerSensor(String) : Sensor
        + eliminarSensor(String) : void
        + obtenerTodosSensores() : List<Sensor>
        + obtenerSensoresPorTipo(String) : List<Sensor>
        + obtenerEstadisticas() : Map<String, Object>
        + obtenerCantidadSensores() : int
        + limpiarSensores() : void
        + obtenerSensoresCriticos() : List<Sensor>
    }
    
    note top of GestorSensores
        <b>üîí Singleton Thread-Safe</b>
        ‚Ä¢ Double-checked locking
        ‚Ä¢ Volatile para visibilidad
        ‚Ä¢ Constructor privado
        ‚Ä¢ Instancia √∫nica garantizada
    end note
}

' ==========================================
' SINGLETON SECUNDARIO - NOTIFICADOR
' ==========================================

package "Singleton Pattern - NotificadorAlertas" #FFF8E1 {
    class NotificadorAlertas {
        - static volatile NotificadorAlertas instancia
        - List<ObservadorAlerta> observadores
        - EstrategiaAnalisis estrategia
        - Object lock = new Object()
        --
        - NotificadorAlertas()
        + obtenerInstancia() : NotificadorAlertas
        + verificarYNotificar(Sensor) : void
        + registrarObservador(ObservadorAlerta) : void
        + eliminarObservador(ObservadorAlerta) : void
        + notificarObservadores(Alerta) : void
        + establecerEstrategiaAnalisis(EstrategiaAnalisis) : void
        + obtenerCantidadObservadores() : int
        + obtenerObservadores() : List<ObservadorAlerta>
        + obtenerEstrategiaActual() : EstrategiaAnalisis
    }
    
    note top of NotificadorAlertas
        <b>üîí Singleton Thread-Safe</b>
        ‚Ä¢ Coordinaci√≥n centralizada
        ‚Ä¢ Gesti√≥n de observadores
        ‚Ä¢ Estrategia de an√°lisis
        ‚Ä¢ Notificaciones autom√°ticas
    end note
}

' ==========================================
' CLASES DE DOMINIO
' ==========================================

package "Domain Classes" #FFE8E8 {
    class Sensor {
        - String id
        - String tipo
        - double valor
        - String ubicacion
        - Date ultimaActualizacion
        --
        + getId() : String
        + getTipo() : String
        + getValor() : double
        + setValor(double) : void
        + getUbicacion() : String
        + getUltimaActualizacion() : Date
        + setUltimaActualizacion(Date) : void
        + toString() : String
    }
    
    class Alerta {
        - String idSensor
        - String mensaje
        - NivelAlerta nivel
        - Date fechaHora
        --
        + getIdSensor() : String
        + getMensaje() : String
        + getNivel() : NivelAlerta
        + getFechaHora() : Date
        + toString() : String
    }
    
    enum NivelAlerta {
        CRITICO
        ADVERTENCIA
        INFORMATIVO
    }
}

' ==========================================
' INTERFACES Y ESTRATEGIAS
' ==========================================

package "Interfaces & Strategies" #E8F5E8 {
    interface ObservadorAlerta {
        + actualizar(Alerta) : void
        + obtenerTipoObservador() : String
    }
    
    interface EstrategiaAnalisis {
        + analizar(Sensor) : Alerta
    }
    
    class EstrategiaAnalisisTemperatura {
        + analizar(Sensor) : Alerta
    }
    
    class EstrategiaAnalisisHumedad {
        + analizar(Sensor) : Alerta
    }
    
    class EstrategiaAnalisisCalidadAire {
        + analizar(Sensor) : Alerta
    }
}

' ==========================================
' CLASES PRINCIPALES DEL SISTEMA
' ==========================================

package "Main System Classes" #F0F8FF {
    class SistemaMonitoreoIoT {
        + main(String[]) : void
        - configurarSistema() : void
        - simularOperaciones() : void
        - mostrarEstadisticasFinales() : void
    }
    
    class PruebaSistemaIoT {
        + main(String[]) : void
        - realizarPruebasAdicionales() : void
        - mostrarEstadisticasDetalladas() : void
    }
}

' ==========================================
' RELACIONES
' ==========================================

' Relaciones Singleton
GestorSensores ||--o{ Sensor : gestiona
NotificadorAlertas ||--o{ ObservadorAlerta : coordina
NotificadorAlertas ||--|| EstrategiaAnalisis : usa

' Relaciones de dominio
Sensor ||--o{ Alerta : genera
Alerta ||--|| NivelAlerta : tiene

' Relaciones con estrategias
EstrategiaAnalisisTemperatura ..|> EstrategiaAnalisis : implements
EstrategiaAnalisisHumedad ..|> EstrategiaAnalisis : implements
EstrategiaAnalisisCalidadAire ..|> EstrategiaAnalisis : implements

' Relaciones principales
SistemaMonitoreoIoT ..> GestorSensores : usa
SistemaMonitoreoIoT ..> NotificadorAlertas : usa
PruebaSistemaIoT ..> GestorSensores : prueba
PruebaSistemaIoT ..> NotificadorAlertas : prueba

' ==========================================
' NOTAS EXPLICATIVAS
' ==========================================

note right of GestorSensores
    <b>üè≠ Gestor de Sensores</b>
    ‚Ä¢ √önica instancia en el sistema
    ‚Ä¢ Thread-safe con double-checked locking
    ‚Ä¢ Gesti√≥n centralizada de sensores
    ‚Ä¢ Estad√≠sticas y monitoreo
end note

note right of NotificadorAlertas
    <b>üì¢ Notificador de Alertas</b>
    ‚Ä¢ Coordinaci√≥n centralizada
    ‚Ä¢ Gesti√≥n de observadores
    ‚Ä¢ Integraci√≥n con estrategias
    ‚Ä¢ Notificaciones autom√°ticas
end note

note bottom of Sensor
    <b>üì° Sensor IoT</b>
    ‚Ä¢ Entidad de dominio
    ‚Ä¢ Gestionado por Singleton
    ‚Ä¢ Datos en tiempo real
    ‚Ä¢ Ubicaci√≥n y tipo
end note

note bottom of Alerta
    <b>üö® Alerta del Sistema</b>
    ‚Ä¢ Generada por an√°lisis
    ‚Ä¢ Nivel de criticidad
    ‚Ä¢ Timestamp de creaci√≥n
    ‚Ä¢ Notificada a observadores
end note

note left of SistemaMonitoreoIoT
    <b>üéØ Sistema Principal</b>
    ‚Ä¢ Punto de entrada
    ‚Ä¢ Configuraci√≥n inicial
    ‚Ä¢ Simulaci√≥n de operaciones
    ‚Ä¢ Estad√≠sticas finales
end note

note left of PruebaSistemaIoT
    <b>üß™ Sistema de Pruebas</b>
    ‚Ä¢ Pruebas del sistema
    ‚Ä¢ Validaci√≥n de funcionalidad
    ‚Ä¢ Estad√≠sticas detalladas
    ‚Ä¢ Verificaci√≥n de patrones
end note

@enduml
